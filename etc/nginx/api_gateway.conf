# Log formats
log_format api_main '$remote_addr - $remote_user [$time_local] "$request"'
                    '$status $body_bytes_sent "$http_referer" "$http_user_agent"'
                    '"$http_x_forwarded_for" "$api_name"';

# Define API endpoints
include api_backends.conf;

server {
    set $api_name -; # Start with an undefined API name, 
                     # each API will update this value and is loggged
    access_log /var/log/nginx/api_access.log api_main; # Each API may also log to a separate file

    listen 443 ssl default_server;
    server_name api.example.com ""; # Internal FQDN

    status_zone api.example.com; 

    # TLS config
    # Internal FQDN crt and key in .pem format
    ssl_certificate      /etc/ssl/api.example.com.crt;
    ssl_certificate_key  /etc/ssl/api.example.com.key;
    
    # Specific TLS Configurations:
    # See Mozilla SSL Configuration Generator for best practices:
    # https://ssl-config.mozilla.org
    ssl_session_cache    shared:SSL:10m;
    ssl_session_timeout  5m;
    ssl_protocols        TLSv1.2 TLSv1.3;

    # API definitions, one per file
    include api_conf.d/*.conf;

    # Active Health Check probes - use Internal (@) locations
    location @mastercard_api {
            proxy_set_header Host $host;
            proxy_pass https://mastercard_api;

            health_check interval=5s fails=2 passes=2 match=health;
            # Health check logs are boring by errors are interesting
            # access_log  /var/log/nginx/health_check.log  main;
            error_log  /var/log/nginx/error.log error;

    }

    # Error responses
    # proxy_intercept_errors off (default) - allow Mastercard API to present errors
    
    #error_page 404 = @400;         # Invalid paths are treated as bad requests
                                    # Leave commented out (disabled) to allow
                                    # Backend APIs to reponse to with errors to
                                    # Client
    
    proxy_intercept_errors off;     # Do not send backend errors to the client
                                    # set to `on` to intercept and present custom
                                    # errors to the client

    include api_json_errors.conf;  # API client friendly JSON error responses
                                   # Used when `proxy_intercept_errors on` is
                                   # Set

    # Set Default mime type
    default_type application/json; # If no content-type then assume JSON

# vim: syntax=nginx